// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: express/thought.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Represents a single thought
type Thought struct {
	// index or id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Creator wallet Address
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// main content max 4GB
	// content will not will checked or read
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// type of content, could be anything -> html | json | xml | markdown | text
	// content type will not be checked
	// it falls on the frontend dev to make sure that content and content type match
	ContentType string `protobuf:"bytes,4,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// is this thought a reply to something ?
	IsReply bool `protobuf:"varint,5,opt,name=isReply,proto3" json:"isReply,omitempty"`
	// if it is a reply, reply to what thought id
	ReplyForThoughtId uint64 `protobuf:"varint,6,opt,name=replyForThoughtId,proto3" json:"replyForThoughtId,omitempty"`
	// if it is a reply, reply to what bubble id
	ReplyForBubbleId uint64 `protobuf:"varint,7,opt,name=replyForBubbleId,proto3" json:"replyForBubbleId,omitempty"`
	// All the categories that this thought belongs to
	Categories []string `protobuf:"bytes,8,rep,name=categories,proto3" json:"categories,omitempty"`
	// All the tags that this thought mentions
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Any extra info that needs to be stored as part of this thought
	// this will most likely be a json encoded string
	// extension will not be read nor its content will be checked
	Extension string `protobuf:"bytes,10,opt,name=extension,proto3" json:"extension,omitempty"`
	// any needed info about how to read extension
	// extensionType and extension string wont be checked
	// falls on the frontend dev to make sure they match
	ExtensionType string `protobuf:"bytes,11,opt,name=extensionType,proto3" json:"extensionType,omitempty"`
	// Is this thought cloned from another thought?
	IsCloned bool `protobuf:"varint,12,opt,name=isCloned,proto3" json:"isCloned,omitempty"`
	// if it is a clone, clone of what thoughtId
	ClonedFromThoughtId uint64 `protobuf:"varint,13,opt,name=clonedFromThoughtId,proto3" json:"clonedFromThoughtId,omitempty"`
	// Is this thought created for a bubble?
	IsChildOfBubble bool `protobuf:"varint,14,opt,name=isChildOfBubble,proto3" json:"isChildOfBubble,omitempty"`
	// if it is part of a bubble, what is the parent bubble id?
	ParentBubbleId uint64 `protobuf:"varint,15,opt,name=parentBubbleId,proto3" json:"parentBubbleId,omitempty"`
	// an array of thoughtIds that created as replies to this Thought
	ThoughtIdsOfReplies []uint64 `protobuf:"varint,16,rep,packed,name=thoughtIdsOfReplies,proto3" json:"thoughtIdsOfReplies,omitempty"`
	// total thought replies created for this thought
	TotalReplyThoughts uint64 `protobuf:"varint,17,opt,name=totalReplyThoughts,proto3" json:"totalReplyThoughts,omitempty"`
	// an array of BubbleIds that are created as replies for this thought
	BubbleIdsOfReplies []uint64 `protobuf:"varint,18,rep,packed,name=bubbleIdsOfReplies,proto3" json:"bubbleIdsOfReplies,omitempty"`
	// total number of reply Bubbles that are created for this thought
	TotalReplyBubbles uint64 `protobuf:"varint,19,opt,name=totalReplyBubbles,proto3" json:"totalReplyBubbles,omitempty"`
}

func (m *Thought) Reset()         { *m = Thought{} }
func (m *Thought) String() string { return proto.CompactTextString(m) }
func (*Thought) ProtoMessage()    {}
func (*Thought) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce425beb2a1c9dc, []int{0}
}
func (m *Thought) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Thought) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Thought.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Thought) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thought.Merge(m, src)
}
func (m *Thought) XXX_Size() int {
	return m.Size()
}
func (m *Thought) XXX_DiscardUnknown() {
	xxx_messageInfo_Thought.DiscardUnknown(m)
}

var xxx_messageInfo_Thought proto.InternalMessageInfo

func (m *Thought) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Thought) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Thought) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Thought) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Thought) GetIsReply() bool {
	if m != nil {
		return m.IsReply
	}
	return false
}

func (m *Thought) GetReplyForThoughtId() uint64 {
	if m != nil {
		return m.ReplyForThoughtId
	}
	return 0
}

func (m *Thought) GetReplyForBubbleId() uint64 {
	if m != nil {
		return m.ReplyForBubbleId
	}
	return 0
}

func (m *Thought) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Thought) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Thought) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *Thought) GetExtensionType() string {
	if m != nil {
		return m.ExtensionType
	}
	return ""
}

func (m *Thought) GetIsCloned() bool {
	if m != nil {
		return m.IsCloned
	}
	return false
}

func (m *Thought) GetClonedFromThoughtId() uint64 {
	if m != nil {
		return m.ClonedFromThoughtId
	}
	return 0
}

func (m *Thought) GetIsChildOfBubble() bool {
	if m != nil {
		return m.IsChildOfBubble
	}
	return false
}

func (m *Thought) GetParentBubbleId() uint64 {
	if m != nil {
		return m.ParentBubbleId
	}
	return 0
}

func (m *Thought) GetThoughtIdsOfReplies() []uint64 {
	if m != nil {
		return m.ThoughtIdsOfReplies
	}
	return nil
}

func (m *Thought) GetTotalReplyThoughts() uint64 {
	if m != nil {
		return m.TotalReplyThoughts
	}
	return 0
}

func (m *Thought) GetBubbleIdsOfReplies() []uint64 {
	if m != nil {
		return m.BubbleIdsOfReplies
	}
	return nil
}

func (m *Thought) GetTotalReplyBubbles() uint64 {
	if m != nil {
		return m.TotalReplyBubbles
	}
	return 0
}

func init() {
	proto.RegisterType((*Thought)(nil), "express.express.Thought")
}

func init() { proto.RegisterFile("express/thought.proto", fileDescriptor_7ce425beb2a1c9dc) }

var fileDescriptor_7ce425beb2a1c9dc = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xdd, 0x8a, 0xda, 0x40,
	0x14, 0x36, 0xea, 0xae, 0xe6, 0x6c, 0x57, 0x77, 0xcf, 0x52, 0x3a, 0x94, 0x12, 0x42, 0x29, 0x25,
	0x94, 0xe2, 0xb6, 0xf4, 0x0d, 0x56, 0x10, 0xbc, 0x12, 0x82, 0x57, 0xbd, 0x4b, 0xcc, 0xa8, 0x03,
	0x69, 0x26, 0xcc, 0x8c, 0xa0, 0x6f, 0xd1, 0xf7, 0xe9, 0x0b, 0xf4, 0xd2, 0xcb, 0x5e, 0x16, 0x7d,
	0x91, 0x32, 0x27, 0x3f, 0x5a, 0xcd, 0x55, 0xce, 0xf9, 0xbe, 0x93, 0x73, 0xbe, 0x6f, 0xe6, 0x0c,
	0xbc, 0xe6, 0xdb, 0x5c, 0x71, 0xad, 0x9f, 0xcd, 0x5a, 0x6e, 0x56, 0x6b, 0x33, 0xca, 0x95, 0x34,
	0x12, 0x87, 0x25, 0x3c, 0x2a, 0xbf, 0xef, 0x7f, 0xdd, 0x40, 0x6f, 0x5e, 0x94, 0xe0, 0x00, 0xda,
	0x22, 0x61, 0x8e, 0xef, 0x04, 0xdd, 0xb0, 0x2d, 0x12, 0x64, 0xd0, 0x5b, 0x28, 0x1e, 0x19, 0xa9,
	0x58, 0xdb, 0x77, 0x02, 0x37, 0xac, 0x52, 0x62, 0x64, 0x66, 0x78, 0x66, 0x58, 0xa7, 0x64, 0x8a,
	0x14, 0x7d, 0xb8, 0x2b, 0xc3, 0xf9, 0x2e, 0xe7, 0xac, 0x4b, 0xec, 0x39, 0x64, 0xff, 0x15, 0x3a,
	0xe4, 0x79, 0xba, 0x63, 0x37, 0xbe, 0x13, 0xf4, 0xc3, 0x2a, 0xc5, 0xcf, 0xf0, 0xa8, 0x6c, 0x30,
	0x91, 0xaa, 0x94, 0x34, 0x4d, 0xd8, 0x2d, 0xc9, 0xb9, 0x26, 0xf0, 0x13, 0x3c, 0x54, 0xe0, 0xcb,
	0x26, 0x8e, 0x53, 0x3e, 0x4d, 0x58, 0x8f, 0x8a, 0xaf, 0x70, 0xf4, 0x00, 0x16, 0x91, 0xe1, 0x2b,
	0xa9, 0x04, 0xd7, 0xac, 0xef, 0x77, 0x02, 0x37, 0x3c, 0x43, 0x10, 0xa1, 0x6b, 0xa2, 0x95, 0x66,
	0x2e, 0x31, 0x14, 0xe3, 0x3b, 0x70, 0xf9, 0xd6, 0xf0, 0x4c, 0x0b, 0x99, 0x31, 0x20, 0x1f, 0x27,
	0x00, 0x3f, 0xc0, 0x7d, 0x9d, 0x90, 0xd3, 0x3b, 0xaa, 0xf8, 0x1f, 0xc4, 0xb7, 0xd0, 0x17, 0x7a,
	0x9c, 0xca, 0x8c, 0x27, 0xec, 0x15, 0x99, 0xad, 0x73, 0xfc, 0x02, 0x4f, 0x0b, 0x8a, 0x26, 0x4a,
	0xfe, 0x38, 0xf9, 0xbd, 0x27, 0x0b, 0x4d, 0x14, 0x06, 0x30, 0x14, 0x7a, 0xbc, 0x16, 0x69, 0x32,
	0x5b, 0x16, 0xd6, 0xd8, 0x80, 0x9a, 0x5e, 0xc2, 0xf8, 0x11, 0x06, 0x79, 0xa4, 0x78, 0x66, 0xea,
	0x93, 0x19, 0x52, 0xdb, 0x0b, 0xd4, 0x6a, 0x30, 0x55, 0x7b, 0x3d, 0x5b, 0xda, 0x6b, 0xb0, 0x07,
	0xf4, 0xe0, 0x77, 0xac, 0x86, 0x06, 0x0a, 0x47, 0x80, 0x46, 0x9a, 0x28, 0xa5, 0x1b, 0x2b, 0xa5,
	0x69, 0xf6, 0x48, 0xdd, 0x1b, 0x18, 0x5b, 0x1f, 0x97, 0xd3, 0xce, 0x06, 0x20, 0x0d, 0x68, 0x60,
	0xec, 0x0e, 0x9c, 0xba, 0x14, 0x3a, 0x35, 0x7b, 0x2a, 0x76, 0xe0, 0x8a, 0x78, 0xf9, 0xfa, 0xfb,
	0xe0, 0x39, 0xfb, 0x83, 0xe7, 0xfc, 0x3d, 0x78, 0xce, 0xcf, 0xa3, 0xd7, 0xda, 0x1f, 0xbd, 0xd6,
	0x9f, 0xa3, 0xd7, 0xfa, 0xfe, 0xa6, 0xda, 0xff, 0xed, 0x73, 0xfd, 0x12, 0x76, 0x39, 0xd7, 0xf1,
	0x2d, 0x3d, 0x84, 0x6f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x59, 0x4c, 0x6b, 0x21, 0x03,
	0x00, 0x00,
}

func (m *Thought) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Thought) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Thought) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalReplyBubbles != 0 {
		i = encodeVarintThought(dAtA, i, uint64(m.TotalReplyBubbles))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.BubbleIdsOfReplies) > 0 {
		dAtA2 := make([]byte, len(m.BubbleIdsOfReplies)*10)
		var j1 int
		for _, num := range m.BubbleIdsOfReplies {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintThought(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.TotalReplyThoughts != 0 {
		i = encodeVarintThought(dAtA, i, uint64(m.TotalReplyThoughts))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ThoughtIdsOfReplies) > 0 {
		dAtA4 := make([]byte, len(m.ThoughtIdsOfReplies)*10)
		var j3 int
		for _, num := range m.ThoughtIdsOfReplies {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintThought(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ParentBubbleId != 0 {
		i = encodeVarintThought(dAtA, i, uint64(m.ParentBubbleId))
		i--
		dAtA[i] = 0x78
	}
	if m.IsChildOfBubble {
		i--
		if m.IsChildOfBubble {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.ClonedFromThoughtId != 0 {
		i = encodeVarintThought(dAtA, i, uint64(m.ClonedFromThoughtId))
		i--
		dAtA[i] = 0x68
	}
	if m.IsCloned {
		i--
		if m.IsCloned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.ExtensionType) > 0 {
		i -= len(m.ExtensionType)
		copy(dAtA[i:], m.ExtensionType)
		i = encodeVarintThought(dAtA, i, uint64(len(m.ExtensionType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintThought(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintThought(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Categories) > 0 {
		for iNdEx := len(m.Categories) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Categories[iNdEx])
			copy(dAtA[i:], m.Categories[iNdEx])
			i = encodeVarintThought(dAtA, i, uint64(len(m.Categories[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ReplyForBubbleId != 0 {
		i = encodeVarintThought(dAtA, i, uint64(m.ReplyForBubbleId))
		i--
		dAtA[i] = 0x38
	}
	if m.ReplyForThoughtId != 0 {
		i = encodeVarintThought(dAtA, i, uint64(m.ReplyForThoughtId))
		i--
		dAtA[i] = 0x30
	}
	if m.IsReply {
		i--
		if m.IsReply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintThought(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintThought(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintThought(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintThought(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintThought(dAtA []byte, offset int, v uint64) int {
	offset -= sovThought(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Thought) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovThought(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovThought(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovThought(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovThought(uint64(l))
	}
	if m.IsReply {
		n += 2
	}
	if m.ReplyForThoughtId != 0 {
		n += 1 + sovThought(uint64(m.ReplyForThoughtId))
	}
	if m.ReplyForBubbleId != 0 {
		n += 1 + sovThought(uint64(m.ReplyForBubbleId))
	}
	if len(m.Categories) > 0 {
		for _, s := range m.Categories {
			l = len(s)
			n += 1 + l + sovThought(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovThought(uint64(l))
		}
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovThought(uint64(l))
	}
	l = len(m.ExtensionType)
	if l > 0 {
		n += 1 + l + sovThought(uint64(l))
	}
	if m.IsCloned {
		n += 2
	}
	if m.ClonedFromThoughtId != 0 {
		n += 1 + sovThought(uint64(m.ClonedFromThoughtId))
	}
	if m.IsChildOfBubble {
		n += 2
	}
	if m.ParentBubbleId != 0 {
		n += 1 + sovThought(uint64(m.ParentBubbleId))
	}
	if len(m.ThoughtIdsOfReplies) > 0 {
		l = 0
		for _, e := range m.ThoughtIdsOfReplies {
			l += sovThought(uint64(e))
		}
		n += 2 + sovThought(uint64(l)) + l
	}
	if m.TotalReplyThoughts != 0 {
		n += 2 + sovThought(uint64(m.TotalReplyThoughts))
	}
	if len(m.BubbleIdsOfReplies) > 0 {
		l = 0
		for _, e := range m.BubbleIdsOfReplies {
			l += sovThought(uint64(e))
		}
		n += 2 + sovThought(uint64(l)) + l
	}
	if m.TotalReplyBubbles != 0 {
		n += 2 + sovThought(uint64(m.TotalReplyBubbles))
	}
	return n
}

func sovThought(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozThought(x uint64) (n int) {
	return sovThought(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Thought) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThought
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thought: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thought: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThought
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThought
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThought
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThought
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThought
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThought
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReply = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyForThoughtId", wireType)
			}
			m.ReplyForThoughtId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyForThoughtId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyForBubbleId", wireType)
			}
			m.ReplyForBubbleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyForBubbleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThought
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThought
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThought
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThought
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThought
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThought
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThought
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThought
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCloned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCloned = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClonedFromThoughtId", wireType)
			}
			m.ClonedFromThoughtId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClonedFromThoughtId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChildOfBubble", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChildOfBubble = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBubbleId", wireType)
			}
			m.ParentBubbleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentBubbleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThought
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ThoughtIdsOfReplies = append(m.ThoughtIdsOfReplies, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThought
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthThought
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthThought
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ThoughtIdsOfReplies) == 0 {
					m.ThoughtIdsOfReplies = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThought
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ThoughtIdsOfReplies = append(m.ThoughtIdsOfReplies, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ThoughtIdsOfReplies", wireType)
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReplyThoughts", wireType)
			}
			m.TotalReplyThoughts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalReplyThoughts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThought
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BubbleIdsOfReplies = append(m.BubbleIdsOfReplies, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThought
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthThought
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthThought
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BubbleIdsOfReplies) == 0 {
					m.BubbleIdsOfReplies = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThought
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BubbleIdsOfReplies = append(m.BubbleIdsOfReplies, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BubbleIdsOfReplies", wireType)
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReplyBubbles", wireType)
			}
			m.TotalReplyBubbles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThought
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalReplyBubbles |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThought(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThought
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThought(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThought
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThought
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThought
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThought
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupThought
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthThought
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthThought        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThought          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupThought = fmt.Errorf("proto: unexpected end of group")
)
