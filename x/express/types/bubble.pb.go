// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: express/bubble.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Bubble struct {
	// bubbleId
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Who created it -> creators wallet address
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Name or title of the bubble
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// any extra info that needs to be stored with the bubble
	// probably a json encoded string
	Extension string `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
	// any extra info that is needed to decode the extension string
	ExtensionType string `protobuf:"bytes,5,opt,name=extensionType,proto3" json:"extensionType,omitempty"`
	// An array of thoughtIds that are part of this Bubble
	ThoughtIds []uint64 `protobuf:"varint,6,rep,packed,name=thoughtIds,proto3" json:"thoughtIds,omitempty"`
	// An array of bubbleIds that are part of this Bubble
	BubbleIds []uint64 `protobuf:"varint,7,rep,packed,name=bubbleIds,proto3" json:"bubbleIds,omitempty"`
}

func (m *Bubble) Reset()         { *m = Bubble{} }
func (m *Bubble) String() string { return proto.CompactTextString(m) }
func (*Bubble) ProtoMessage()    {}
func (*Bubble) Descriptor() ([]byte, []int) {
	return fileDescriptor_6227703f4a60fd37, []int{0}
}
func (m *Bubble) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bubble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bubble.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bubble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bubble.Merge(m, src)
}
func (m *Bubble) XXX_Size() int {
	return m.Size()
}
func (m *Bubble) XXX_DiscardUnknown() {
	xxx_messageInfo_Bubble.DiscardUnknown(m)
}

var xxx_messageInfo_Bubble proto.InternalMessageInfo

func (m *Bubble) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bubble) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Bubble) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Bubble) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *Bubble) GetExtensionType() string {
	if m != nil {
		return m.ExtensionType
	}
	return ""
}

func (m *Bubble) GetThoughtIds() []uint64 {
	if m != nil {
		return m.ThoughtIds
	}
	return nil
}

func (m *Bubble) GetBubbleIds() []uint64 {
	if m != nil {
		return m.BubbleIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Bubble)(nil), "express.express.Bubble")
}

func init() { proto.RegisterFile("express/bubble.proto", fileDescriptor_6227703f4a60fd37) }

var fileDescriptor_6227703f4a60fd37 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xad, 0x28, 0x28,
	0x4a, 0x2d, 0x2e, 0xd6, 0x4f, 0x2a, 0x4d, 0x4a, 0xca, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x87, 0x8a, 0xea, 0x41, 0x69, 0x29, 0x51, 0x98, 0xb2, 0x92, 0x8c, 0xfc, 0xd2, 0xf4,
	0x8c, 0x12, 0x88, 0x3a, 0xa5, 0x53, 0x8c, 0x5c, 0x6c, 0x4e, 0x60, 0x8d, 0x42, 0x7c, 0x5c, 0x4c,
	0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x4c, 0x99, 0x29, 0x42, 0x12, 0x5c, 0xec,
	0xc9, 0x45, 0xa9, 0x89, 0x25, 0xf9, 0x45, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae,
	0x90, 0x08, 0x17, 0x6b, 0x49, 0x66, 0x49, 0x4e, 0xaa, 0x04, 0x33, 0x58, 0x1c, 0xc2, 0x11, 0x92,
	0xe1, 0xe2, 0x4c, 0xad, 0x28, 0x49, 0xcd, 0x2b, 0xce, 0xcc, 0xcf, 0x93, 0x60, 0x01, 0xcb, 0x20,
	0x04, 0x84, 0x54, 0xb8, 0x78, 0xe1, 0x9c, 0x90, 0xca, 0x82, 0x54, 0x09, 0x56, 0xb0, 0x0a, 0x54,
	0x41, 0x21, 0x39, 0x2e, 0x2e, 0xa8, 0xfb, 0x3c, 0x53, 0x8a, 0x25, 0xd8, 0x14, 0x98, 0x35, 0x58,
	0x82, 0x90, 0x44, 0x40, 0x76, 0x40, 0xbc, 0x09, 0x92, 0x66, 0x07, 0x4b, 0x23, 0x04, 0x9c, 0x0c,
	0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x1c, 0xe6, 0xfb, 0x0a, 0x7d,
	0x78, 0x38, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x83, 0xc1, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x77, 0x17, 0x07, 0x37, 0x46, 0x01, 0x00, 0x00,
}

func (m *Bubble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bubble) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bubble) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BubbleIds) > 0 {
		dAtA2 := make([]byte, len(m.BubbleIds)*10)
		var j1 int
		for _, num := range m.BubbleIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintBubble(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ThoughtIds) > 0 {
		dAtA4 := make([]byte, len(m.ThoughtIds)*10)
		var j3 int
		for _, num := range m.ThoughtIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBubble(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExtensionType) > 0 {
		i -= len(m.ExtensionType)
		copy(dAtA[i:], m.ExtensionType)
		i = encodeVarintBubble(dAtA, i, uint64(len(m.ExtensionType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintBubble(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBubble(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBubble(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBubble(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBubble(dAtA []byte, offset int, v uint64) int {
	offset -= sovBubble(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bubble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBubble(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBubble(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBubble(uint64(l))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovBubble(uint64(l))
	}
	l = len(m.ExtensionType)
	if l > 0 {
		n += 1 + l + sovBubble(uint64(l))
	}
	if len(m.ThoughtIds) > 0 {
		l = 0
		for _, e := range m.ThoughtIds {
			l += sovBubble(uint64(e))
		}
		n += 1 + sovBubble(uint64(l)) + l
	}
	if len(m.BubbleIds) > 0 {
		l = 0
		for _, e := range m.BubbleIds {
			l += sovBubble(uint64(e))
		}
		n += 1 + sovBubble(uint64(l)) + l
	}
	return n
}

func sovBubble(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBubble(x uint64) (n int) {
	return sovBubble(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bubble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBubble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bubble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bubble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBubble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBubble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBubble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBubble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBubble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBubble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBubble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBubble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBubble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBubble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBubble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBubble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBubble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBubble
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ThoughtIds = append(m.ThoughtIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBubble
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBubble
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBubble
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ThoughtIds) == 0 {
					m.ThoughtIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBubble
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ThoughtIds = append(m.ThoughtIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ThoughtIds", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBubble
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BubbleIds = append(m.BubbleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBubble
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBubble
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBubble
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BubbleIds) == 0 {
					m.BubbleIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBubble
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BubbleIds = append(m.BubbleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BubbleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBubble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBubble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBubble(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBubble
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBubble
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBubble
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBubble
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBubble
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBubble
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBubble        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBubble          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBubble = fmt.Errorf("proto: unexpected end of group")
)
